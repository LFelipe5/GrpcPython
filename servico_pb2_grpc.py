# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import servico_pb2 as servico__pb2


class RotaMensagemStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMensagem = channel.unary_unary(
                '/RotaMensagem/GetMensagem',
                request_serializer=servico__pb2.EnvioMensagem.SerializeToString,
                response_deserializer=servico__pb2.Resposta.FromString,
                )
        self.ListMensagemCliente = channel.unary_stream(
                '/RotaMensagem/ListMensagemCliente',
                request_serializer=servico__pb2.EnvioMensagem.SerializeToString,
                response_deserializer=servico__pb2.Resposta.FromString,
                )
        self.ListMensagemAmbos = channel.stream_stream(
                '/RotaMensagem/ListMensagemAmbos',
                request_serializer=servico__pb2.EnvioMensagem.SerializeToString,
                response_deserializer=servico__pb2.Resposta.FromString,
                )
        self.ListMensagemServidor = channel.unary_stream(
                '/RotaMensagem/ListMensagemServidor',
                request_serializer=servico__pb2.EnvioMensagem.SerializeToString,
                response_deserializer=servico__pb2.Resposta.FromString,
                )


class RotaMensagemServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetMensagem(self, request, context):
        """Método Unário
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListMensagemCliente(self, request, context):
        """Método Cliente de Streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListMensagemAmbos(self, request_iterator, context):
        """Método Fluxo bidirecional
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListMensagemServidor(self, request, context):
        """Método Servidor de Streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RotaMensagemServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMensagem': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMensagem,
                    request_deserializer=servico__pb2.EnvioMensagem.FromString,
                    response_serializer=servico__pb2.Resposta.SerializeToString,
            ),
            'ListMensagemCliente': grpc.unary_stream_rpc_method_handler(
                    servicer.ListMensagemCliente,
                    request_deserializer=servico__pb2.EnvioMensagem.FromString,
                    response_serializer=servico__pb2.Resposta.SerializeToString,
            ),
            'ListMensagemAmbos': grpc.stream_stream_rpc_method_handler(
                    servicer.ListMensagemAmbos,
                    request_deserializer=servico__pb2.EnvioMensagem.FromString,
                    response_serializer=servico__pb2.Resposta.SerializeToString,
            ),
            'ListMensagemServidor': grpc.unary_stream_rpc_method_handler(
                    servicer.ListMensagemServidor,
                    request_deserializer=servico__pb2.EnvioMensagem.FromString,
                    response_serializer=servico__pb2.Resposta.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RotaMensagem', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RotaMensagem(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetMensagem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RotaMensagem/GetMensagem',
            servico__pb2.EnvioMensagem.SerializeToString,
            servico__pb2.Resposta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListMensagemCliente(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/RotaMensagem/ListMensagemCliente',
            servico__pb2.EnvioMensagem.SerializeToString,
            servico__pb2.Resposta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListMensagemAmbos(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/RotaMensagem/ListMensagemAmbos',
            servico__pb2.EnvioMensagem.SerializeToString,
            servico__pb2.Resposta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListMensagemServidor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/RotaMensagem/ListMensagemServidor',
            servico__pb2.EnvioMensagem.SerializeToString,
            servico__pb2.Resposta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
